#1.1 Unpacking a Sequence into Separate Variables

p = (4,5)
x, y = p
#x = 4
#y = 5

data = [ACME, 50, 91.1, (2012, 12,21)]
name, shares, price, date = data

#string example
s = "Hello"
a, b, c, d, e = s
#a = H
#b = e
#e = o


#1.2 Unpacking elements from Iterables

def drop_first_last(grades):
    first, *middle, last = grades
    return avg(middle)

*trailing_atrs, current_qtr = slaes_record
trailing_avg= sum(trailing_qtrs)/len(trailing_qtrs)
return avg_comparison(trailing_avg, current_qtr)

*trailing, current = [10, 8, 7, 1, 9, 5, 10, 3]
#trailing = [10, 8, 7, 1, 9, 5, 10]
#current = 3

#1.3 Keeping the Last N item
from collections import deque
from pdb import line_prefix

def search(lines, pattern, history=5):
    previous_lines = deque(maxlen=history)
    for line in lines:
        if pattern in line:
            yield line, previous_lines
        previous_lines.append(line_prefix)

if __name__ == '__main__':
    with open('somefile.txt') as f:
        for line, prevlines in search(f, 'python', 5):
            for pline in prevlines:
                print(pline, end="")
            print(line, end='')
            print('-'*20)


#creating fixed queue
q = deque(maxlen=3)
q.append(1)
q.append(2)
q.append(3)
#deque([1, 2, 3], maxlen=3)
q.append(4)
#deque([2, 3, 4], maxlen=3)
#if deque is not given a length then you can append and pop items on either end
q = deque()
q.append(1)
q.append(2)
q.append(3)
q.appendleft(4)
#deque([4, 1, 2, 3])
q.pop(3)
#deque([4, 1, 2])

#1.4 Finding the Largest or Smallest N Items

import heapq

nums = [1,8,2,23,7,-4,18,23,42,37,9]
print(heapq.nlargest(3, nums)) #Prints [42,37,23]
print(heapq.nsmallest(3, nums)) #Prints [-4,1,2]

heapq.heappop(heap)
#removes the smallest number in this case -4

#simple priority queue
import heapq

class PriorityQueue:
    def __init__(self):
        self.queue = []
        self.index = 0
    def push(self, item, priority):
        heapq.heappush(self._queue, (priority, self._index, item))
        self.index += 1

    def pop(self):
        return heapq.heappop(self._queue)[-1]

#example of use case
class Item:
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return 'Item({!r})'.format(self.name)

    q.PriorityQueue()
    q.push(Item('foo'), 1)
    q.push(Item('bar'), 5)
    q.push(Item('spam'), 4)
    q.push(Item('grok'), 1)
    q.pop() #pops Item('bar') lowest priority
    q.pop() #pops the Item('spam') second lowest --> continues up the chain to highest priority starting with first in

    #introduction of extra index to avoid comparison error
    a = (1,0, Item('foo'))
    b = (5,1, Item('bar'))
    c = (1,2, Item('grok'))
    a < b #returns true since index is implemented
    
